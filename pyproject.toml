[project]
name = "edgetest"
requires-python = ">=3.8.0"
description = "Bleeding edge dependency testing"
authors = [
    { name = "Akshay Gupta", email = "akshay.gupta2@capitalone.com" },
    { name = "Faisal Dosani", email = "faisal.dosani@capitalone.com" },
    { name = "Jacob Dawang", email = "jacob.dawang@capitalone.com" }
]
license = {text = "Apache Software License"}
classifiers = [
	"Intended Audience :: Developers",
	"Natural Language :: English",
	"Operating System :: OS Independent",
	"Programming Language :: Python",
	"Programming Language :: Python :: 3",
	"Programming Language :: Python :: 3 :: Only",
	"Programming Language :: Python :: 3.8",
	"Programming Language :: Python :: 3.9",
	"Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	"Programming Language :: Python :: 3.12",
]
dependencies = ["Cerberus<=1.3.5,>=1.3.0", "click<=8.1.7,>=7.0", "pluggy<=1.5.0,>=1.3.0", "tabulate<=0.9.0,>=0.8.9", "packaging<=24.1,>20.6", "tomlkit<=0.11.4,>=0.11.4", "uv<=0.4.26,>=0.2.0"]

dynamic = ["readme", "version"]

[project.optional-dependencies]
docs = ["furo", "sphinx", "sphinx-copybutton", "sphinx-tabs", "pillow", "recommonmark"]
tests = ["coverage", "pytest", "pytest-cov"]
qa = ["mypy", "pre-commit", "ruff~=0.5", "types-click", "types-setuptools", "types-tabulate"]
build = ["build", "twine", "wheel", "bumpver"]
dev = ["edgetest[docs]", "edgetest[tests]", "edgetest[qa]", "edgetest[build]"]

[project.urls]
"Documentation" = "https://capitalone.github.io/edgetest/"
"Bug Tracker" = "https://github.com/capitalone/edgetest/issues"
"Source Code" = "https://github.com/capitalone/edgetest"

[project.scripts]
edgetest = "edgetest.interface:cli"

# Build system
[build-system]
requires = ["setuptools>=64.0.0"]
build-backend = "setuptools.build_meta"

##############################################################################
# Setuptools configuration
##############################################################################

[tool.setuptools]
include-package-data = true
zip-safe = false

[tool.setuptools.dynamic]
version = { attr = "edgetest.__version__" }
readme = { file = ["README.md"], content-type = "text/markdown" }

##############################################################################
# Tooling
##############################################################################

# EDGETEST -------------------------------------------------------------------

[edgetest.envs.core]
python_version = "3.9"
extras = [
    "tests",
]
upgrade = [
    "Cerberus",
    "click",
    "pluggy",
    "tabulate",
    "packaging",
	"uv",
]

[edgetest.envs.low]
python_version = "3.9"
extras = [
    "tests",
]
lower = [
    "Cerberus",
    "click",
    "pluggy",
    "tabulate",
    "packaging",
	"uv",
]

# BUMPVER --------------------------------------------------------------------

[bumpver]
current_version = "2024.10.0"
version_pattern = "YYYY.MM.INC0"

[bumpver.file_patterns]
"docs/source/conf.py" = [
    'version = "{version}"',
]
"pyproject.toml" = [
    'current_version = "{version}"',
]
"edgetest/__init__.py" = [
    '__version__ = "{version}"',
]

# MYPY -----------------------------------------------------------------------

[tool.mypy]
python_version = 3.9
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
allow_redefinition = true
disable_error_code = "empty-body"

# PYTEST ---------------------------------------------------------------------

[tool.pytest.ini_options]
markers = [
    "unit: mark unit tests that do not require external interfaces and use mocking",
    "integration: mark test that interact with an external system",
]
addopts = "--verbose"

# RUFF -----------------------------------------------------------------------

[tool.ruff]
extend-include = ["*.ipynb"]
target-version = "py39"

[tool.ruff.lint]
preview = true
select = [
	"E",  # pycodestyle errors
	"W",  # pycodestyle warnings
	"F",  # pyflakes
	"D",  # pydocstyle
	"I",  # isort
	"UP",  # pyupgrade
	"B",  # flake8-bugbear
	"C",  # flake8-comprehensions
	"T20",  # flake8-print
	"TID252",  # flake8-tidy-imports ban relative imports
	"SIM",  # flake8-simplify
	"LOG",  # flake8-logging
	"RUF",  # Ruff errors
]
ignore = [
	"C901",  # Add back in later
	"E111",  # Check indentation level. Using formatter instead.
	"E114",  # Check indentation level. Using formatter instead.
	"E117",  # Check indentation level. Using formatter instead.
	"E203",  # Check whitespace. Using formatter instead.
	"E501",  # Line too long. Using formatter instead.
	"D206",  # Docstring indentation. Using formatter instead.
	"D300",  # Use triple single quotes. Using formatter instead.
	"SIM108",  # Use ternary operator instead of if-else blocks.
	"SIM105",  # Use ``contextlib.suppress(FileNotFoundError)`` insetad of try - execpt - pass.
	"UP035",  # ``typing.x`` is deprecated, use ``x`` instead
	"UP006",  # ``typing.x`` is deprecated, use ``x`` instead
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"**/{tests,docs}/*" = ["E402", "D", "F841", "ARG"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pydocstyle]
convention = "numpy"